@startuml

interface Drivable {
    + drive() : void
    + snort() : void
    + stop() : void
    + accelerate() : void
}

interface Refreshable {
    + refill(amount : int) : void
    + consume(amount : int) : void
}

interface Breakable {
    + isBroken : boolean

    + breakItem() : void
    + isBroken() : boolean
}

abstract class Item implements Breakable{
    - title : String
    - isBroken : boolean

    + Item(item : String)

    + breakItem() : void
    + getTitle() : String
    + <<abstract>> isBroken() : boolean
}

'class Booth extends Item implements Breakable {
'    - title : String
'    - isBroken : boolean
'
'    + Booth(title : String)
'
'    + breakItem() : void
'    + getTitle() : String
'    + isBroken() : boolean
'}
'
'class Pavilion extends Item implements Breakable {
'    - title : String
'    - isBroken : boolean
'
'    + Pavilion(title : String)
'
'    + breakItem() : void
'    + getTitle() : String
'    + isBroken() : boolean
'}

class Shard extends Item {
    - title : String
    - isBroken : boolean

    + Shard(title : String)

    + getTitle() : String
    + hook(character : Character) : void
    + crack(character : Character) : void
}

abstract class Vehicle extends Item implements Drivable, Refreshable{
    - title : String
    - <<abstract>> title : String
    - fuelLevel : int
    - driver : Driver
    - passengers : Passengers[]
    - type : TypeCar
    - isBroken : boolean

    + Vehicle(type: TypeCar, driver : Driver)
    + Vehicle(type: TypeCar, driver : Driver, passengers : Passenger[])

    + getTitle() : String
    + getFuelLevel() : int
    + isBroken() : boolean
    + setFuelLevel(amount : int) : void
    + smash(item : Item) : void
    + crush(entity : Entity) : void
    + refill(amount : int) : void
    + consume(amount : int) : void
    + <<abstract>> drive() : void
    + <<abstract>> snort() : void
    + <<abstract>> stop() : void
    + <<abstract>> accelerate() : void
}

class Entity {
    - name : String

    + Entity(name : String)
    + getName() : String
}

abstract class Character extends Entity implements Refreshable{
    - name : String
    - <<abstract>> canDrive : boolean

    + Character(name : String)

    + getName() : String
    + refill(amount : int) : void
    + consume(amount : int) : void
    + shout() : void
    + learnDrive() : void
    + runOut() : void
    + buildCar() : void
    + run() : void
    + see() : void
    + ask() : void
    + openFence() : void
}

class Driver extends Character {
    - name : String

    + Driver(name : String)

    + getName() : String
    + drive() : void
    + pressPedals() : void
    + pullLevers() : void
    + grabSteeringWheel() : void
    + turn() : void
}

class Passenger extends Character {
    - name : String

    + Passenger(name : String)

    + getName() : String
    + refill(amount : int) : void
    + consume(amount : int) : void
}

































'interface Drivable {
'    + drive() : void
'    + stop() : void
'    + accelerate() : void
'}
'
'interface Breakable {
'    + breakObject() : void
'    + isDestroyed() : boolean
'}
'
'interface Refreshable {
'    + refill() : void
'    + consume(int amount) : boolean
'}
'
'abstract class Character {
'    + name : String
'    + energy : int
'    + <<abstract>> performAction() :  void
'}
'
'class Driver extends Character implements Drivable {
'    + canDrive() : boolean
'    + drive() : void
'    + stop() : void
'    + accelerate() : void
'    + performAction() : void
'}
'
'abstract class Vehicle {
'    + isPullLevers : boolean
'    + isPressPedals : boolean
'
'    + <<abstract>> snort() : void
'    + <<abstract>> drive() : void
'    + crush(obj : String) : boolean
'}
'class Car extends Vehicle{
'    + driver : Driver
'
'}
@enduml

'Такие газированные автомобили были очень распространены среди коротышек.
'Но в автомобиле, который соорудили Винтик и Шпунтик, имелось одно очень важное усовершенствование: сбоку к баку была приделана гибкая резиновая трубка с краником, для того чтобы можно было попить газированной воды на ходу, не останавливая машины.
'Торопыжка научился управлять этим автомобилем, и, если кому-нибудь хотелось покататься, Торопыжка катал и никому не отказывал.
'Больше всех любил кататься на автомобиле Сиропчик, так как во время поездки он мог пить сколько угодно газированной воды с сиропом.
'Незнайка тоже любил кататься на автомобиле, и Торопыжка часто его катал.
'Но Незнайке захотелось самому научиться управлять автомобилем, и он стал просить Торопыжку: Однажды, когда Торопыжки не было дома, Незнайка забрался в автомобиль, который стоял во дворе, и стал дергать за рычаги и нажимать педали.
'Сначала у него ничего не получалось, потом вдруг машина зафыркала и поехала.
'Коротышки увидели это в окно и выбежали из дома.
'Трах-трах! Будка рассыпалась в щепки. Хорошо еще, что Булька успел выскочить, а то Незнайка и его раздавил бы.
'Незнайка испугался, хотел остановить машину и потянул какой-то рычаг.
'Но машина, вместо того чтобы остановиться, поехала еще быстрей.
'На дороге попалась беседка. Трах-та-ра-рах! Беседка рассыпалась на кусочки.
'Незнайку с ног до головы забросало щепками. Одной доской его зацепило по спине, другой треснуло по затылку.
'Незнайка ухватился за руль и давай поворачивать. Автомобиль носится по двору, а Незнайка кричит во все горло: Коротышки открыли ворота, Незнайка выехал со двора и помчался по улице.
'Услышав шум, со всех дворов выбегали коротышки.
'Знайка, Авоська, Винтик, доктор Пилюлькин и другие коротышки бежали за ним.
'Но где там! Они не могли его догнать.